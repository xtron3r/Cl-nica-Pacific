from django.test import TestCase
from rest_framework.test import APITestCase
from rest_framework import status
from django.urls import reverse
from .models import Paciente
from .models import Medico

class PacientePOSTTest(APITestCase):
    def test_create_paciente(self):
        url = reverse('paciente-list-create')
        data = {
            "nombrepa": "Juan P√©rez",
            "rut_paciente": "12345678-9",
            "prevision": "FONASA"
        }
        response = self.client.post(url, data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(Paciente.objects.count(), 1)
        self.assertEqual(Paciente.objects.first().nombrepa, "Juan P√©rez")


class PacienteGETTest(APITestCase):
    def setUp(self):
        Paciente.objects.create(nombrepa="Ana Soto", rut_paciente="98765432-1", prevision="ISAPRE")

    def test_list_pacientes(self):
        url = reverse('paciente-list-create')
        response = self.client.get(url)
        try:
            self.assertEqual(response.status_code, status.HTTP_200_OK)
            self.assertEqual(len(response.data), 1)
            self.assertEqual(response.data[0]["nombrepa"], "Ana Soto")
        except AssertionError as e:
            print(f"‚ùå Test List Pacientes fall√≥: {e}")
            raise
        else:
            print("‚úÖ Test List Pacientes pas√≥ correctamente")


class PacientePUTTest(APITestCase):
    def setUp(self):
        self.paciente = Paciente.objects.create(nombrepa="Carlos Ruiz", rut_paciente="12345678-0", prevision="PARTICULAR")

    def test_update_paciente(self):
        url = reverse('paciente-detail', args=[self.paciente.pk])
        data = {
            "nombrepa": "Carlos R.",
            "rut_paciente": "12345678-0",
            "prevision": "ISAPRE"
        }
        response = self.client.put(url, data, format='json')
        try:
            self.assertEqual(response.status_code, status.HTTP_200_OK)
            self.paciente.refresh_from_db()
            self.assertEqual(self.paciente.nombrepa, "Carlos R.")
            self.assertEqual(self.paciente.prevision, "ISAPRE")
        except AssertionError as e:
            print(f"‚ùå Test Update Paciente fall√≥: {e}")
            raise
        else:
            print("‚úÖ Test Update Paciente pas√≥ correctamente")


class PacienteDELETETest(APITestCase):
    def setUp(self):
        self.paciente = Paciente.objects.create(nombrepa="Laura D√≠az", rut_paciente="11111111-1", prevision="FONASA")

    def test_delete_paciente(self):
        url = reverse('paciente-detail', args=[self.paciente.pk])
        response = self.client.delete(url)
        try:
            self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)
            self.assertFalse(Paciente.objects.filter(pk=self.paciente.pk).exists())
        except AssertionError as e:
            print(f"‚ùå Test Delete Paciente fall√≥: {e}")
            raise
        else:
            print("‚úÖ Test Delete Paciente pas√≥ correctamente")


class PacienteDELETETest(APITestCase):
    def setUp(self):
        self.paciente = Paciente.objects.create(nombrepa="Laura D√≠az", rut_paciente="11111111-1", prevision="FONASA")

    def test_delete_paciente(self):
        url = reverse('paciente-detail', args=[self.paciente.pk])
        response = self.client.delete(url)
        try:
            self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)
            self.assertFalse(Paciente.objects.filter(pk=self.paciente.pk).exists())
        except AssertionError as e:
            print(f"‚ùå Test Delete Paciente fall√≥: {e}")
            raise
        else:
            print("‚úÖ Test Delete Paciente pas√≥ correctamente")

#PRUEBAS MEDICOS
class MedicoGETTest(APITestCase):
    def setUp(self):
        Medico.objects.create(nombrem="Julio Rivera", rut_medico="22837213-1", especialidad="Telemedicina")
        
    def test_list_medico(self):
        url = reverse('medico-list-create')
        response = self.client.get(url)
        try:
            self.assertEqual(response.status_code, status.HTTP_200_OK)
            self.assertEqual(len(response.data), 1)
            self.assertEqual(response.data[0]["nombrem"], "Julio Rivera")
        except AssertionError as e:
            print(f"‚ùå Test List Medico fall√≥: {e}")
            raise
        else:
            print("‚úÖ Test List Medico pas√≥ correctamente")
            
class MedicoDELETETest(APITestCase):
    def setUp(self):
        self.medico = Medico.objects.create(
            nombrem="Julio Rivera", 
            rut_medico="22837213-1", 
            especialidad="Telemedicina",
            disponibilidad="DISPONIBLE"
        )

    def test_delete_medico(self):
        url = reverse('medico-detail', args=[self.medico.pk])  
        response = self.client.delete(url)
        try:
            self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)
            self.assertFalse(Medico.objects.filter(pk=self.medico.pk).exists())
        except AssertionError as e:
            print(f"‚ùå Test Delete Medico fall√≥: {e}")
            raise
        else:
            print("‚úÖ Test Delete Medico pas√≥ correctamente")

class MedicoPOSTTest(APITestCase):
    def test_create_medico(self):
        url = reverse('medico-list-create')
        data = {
            "nombrem": "Martin Vargas",
            "rut_medico": "12443234-9",
            "especialidad": "Medicina General",
            "disponibilidad": "DISPONIBLE"
        }
        response = self.client.post(url, data, format='json')
        print("üì§ Datos enviados:", data)
        print("üì• Respuesta:", response.data)

        try:
            self.assertEqual(response.status_code, status.HTTP_201_CREATED)
            self.assertEqual(Medico.objects.count(), 1)
            self.assertEqual(Medico.objects.first().nombrem, "Martin Vargas")
        except AssertionError as e:
            print(f"‚ùå Test Create Medico fall√≥: {e}")
            raise
        else:
            print("‚úÖ Test Create Medico pas√≥ correctamente")
            
class MedicoPUTTest(APITestCase):
    def setUp(self):
        self.medico = Medico.objects.create(nombrem="Miguel Angel", rut_medico="12345623-5", especialidad="Oftalmologia", disponibilidad="NODISPONIBLE")

    def test_update_medico(self):
        url = reverse('medico-detail', args=[self.medico.pk])
        data = {
            "nombrem": "Miguelito Angel",
            "rut_medico": "12345623-5",
            "especialidad": "Oftalmologia",
            "disponibilidad": "DISPONIBLE"
        }
        response = self.client.put(url, data, format='json')
        try:
            self.assertEqual(response.status_code, status.HTTP_200_OK)
            self.medico.refresh_from_db()
            self.assertEqual(self.medico.nombrem, "Miguelito Angel")
            self.assertEqual(self.medico.disponibilidad, "DISPONIBLE")
        except AssertionError as e:
            print(f"‚ùå Test Update Medico fall√≥: {e}")
            raise
        else:
            print("‚úÖ Test Update Medico pas√≥ correctamente")
